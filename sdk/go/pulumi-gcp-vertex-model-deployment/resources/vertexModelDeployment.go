// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resources

import (
	"context"
	"reflect"

	"errors"
	"github.com/davidmontoyago/pulumi-gcp-vertex-model-deployment/sdk/go/pulumi-gcp-vertex-model-deployment/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deploys a model to a Vertex AI endpoint
type VertexModelDeployment struct {
	pulumi.CustomResourceState

	// Creation timestamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// ID of the deployed model
	DeployedModelId pulumi.StringOutput `pulumi:"deployedModelId"`
	// Vertex AI Endpoint ID
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`
	// Full name of the endpoint
	EndpointName pulumi.StringOutput `pulumi:"endpointName"`
	// Labels for the deployment
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Machine type for deployment
	MachineType pulumi.StringPtrOutput `pulumi:"machineType"`
	// Maximum number of replicas
	MaxReplicas pulumi.IntPtrOutput `pulumi:"maxReplicas"`
	// Minimum number of replicas
	MinReplicas pulumi.IntPtrOutput `pulumi:"minReplicas"`
	// Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
	ModelArtifactsBucketUri pulumi.StringOutput `pulumi:"modelArtifactsBucketUri"`
	// Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
	ModelImageUrl pulumi.StringOutput `pulumi:"modelImageUrl"`
	// Google Cloud Project ID
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Google Cloud region
	Region pulumi.StringOutput `pulumi:"region"`
	// Service account for the deployment
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
	// Traffic percentage for this deployment
	TrafficPercent pulumi.IntPtrOutput `pulumi:"trafficPercent"`
}

// NewVertexModelDeployment registers a new resource with the given unique name, arguments, and options.
func NewVertexModelDeployment(ctx *pulumi.Context,
	name string, args *VertexModelDeploymentArgs, opts ...pulumi.ResourceOption) (*VertexModelDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointId'")
	}
	if args.ModelArtifactsBucketUri == nil {
		return nil, errors.New("invalid value for required argument 'ModelArtifactsBucketUri'")
	}
	if args.ModelImageUrl == nil {
		return nil, errors.New("invalid value for required argument 'ModelImageUrl'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.MachineType == nil {
		args.MachineType = pulumi.StringPtr("n1-standard-2")
	}
	if args.MaxReplicas == nil {
		args.MaxReplicas = pulumi.IntPtr(3)
	}
	if args.MinReplicas == nil {
		args.MinReplicas = pulumi.IntPtr(1)
	}
	if args.TrafficPercent == nil {
		args.TrafficPercent = pulumi.IntPtr(100)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VertexModelDeployment
	err := ctx.RegisterResource("gcp-vertex-model-deployment:resources:VertexModelDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVertexModelDeployment gets an existing VertexModelDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVertexModelDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VertexModelDeploymentState, opts ...pulumi.ResourceOption) (*VertexModelDeployment, error) {
	var resource VertexModelDeployment
	err := ctx.ReadResource("gcp-vertex-model-deployment:resources:VertexModelDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VertexModelDeployment resources.
type vertexModelDeploymentState struct {
}

type VertexModelDeploymentState struct {
}

func (VertexModelDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexModelDeploymentState)(nil)).Elem()
}

type vertexModelDeploymentArgs struct {
	// Vertex AI Endpoint ID
	EndpointId string `pulumi:"endpointId"`
	// Labels for the deployment
	Labels map[string]string `pulumi:"labels"`
	// Machine type for deployment
	MachineType *string `pulumi:"machineType"`
	// Maximum number of replicas
	MaxReplicas *int `pulumi:"maxReplicas"`
	// Minimum number of replicas
	MinReplicas *int `pulumi:"minReplicas"`
	// Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
	ModelArtifactsBucketUri string `pulumi:"modelArtifactsBucketUri"`
	// Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
	ModelImageUrl string `pulumi:"modelImageUrl"`
	// Google Cloud Project ID
	ProjectId string `pulumi:"projectId"`
	// Google Cloud region
	Region string `pulumi:"region"`
	// Service account for the deployment
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Traffic percentage for this deployment
	TrafficPercent *int `pulumi:"trafficPercent"`
}

// The set of arguments for constructing a VertexModelDeployment resource.
type VertexModelDeploymentArgs struct {
	// Vertex AI Endpoint ID
	EndpointId pulumi.StringInput
	// Labels for the deployment
	Labels pulumi.StringMapInput
	// Machine type for deployment
	MachineType pulumi.StringPtrInput
	// Maximum number of replicas
	MaxReplicas pulumi.IntPtrInput
	// Minimum number of replicas
	MinReplicas pulumi.IntPtrInput
	// Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
	ModelArtifactsBucketUri pulumi.StringInput
	// Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
	ModelImageUrl pulumi.StringInput
	// Google Cloud Project ID
	ProjectId pulumi.StringInput
	// Google Cloud region
	Region pulumi.StringInput
	// Service account for the deployment
	ServiceAccount pulumi.StringPtrInput
	// Traffic percentage for this deployment
	TrafficPercent pulumi.IntPtrInput
}

func (VertexModelDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vertexModelDeploymentArgs)(nil)).Elem()
}

type VertexModelDeploymentInput interface {
	pulumi.Input

	ToVertexModelDeploymentOutput() VertexModelDeploymentOutput
	ToVertexModelDeploymentOutputWithContext(ctx context.Context) VertexModelDeploymentOutput
}

func (*VertexModelDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexModelDeployment)(nil)).Elem()
}

func (i *VertexModelDeployment) ToVertexModelDeploymentOutput() VertexModelDeploymentOutput {
	return i.ToVertexModelDeploymentOutputWithContext(context.Background())
}

func (i *VertexModelDeployment) ToVertexModelDeploymentOutputWithContext(ctx context.Context) VertexModelDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexModelDeploymentOutput)
}

// VertexModelDeploymentArrayInput is an input type that accepts VertexModelDeploymentArray and VertexModelDeploymentArrayOutput values.
// You can construct a concrete instance of `VertexModelDeploymentArrayInput` via:
//
//	VertexModelDeploymentArray{ VertexModelDeploymentArgs{...} }
type VertexModelDeploymentArrayInput interface {
	pulumi.Input

	ToVertexModelDeploymentArrayOutput() VertexModelDeploymentArrayOutput
	ToVertexModelDeploymentArrayOutputWithContext(context.Context) VertexModelDeploymentArrayOutput
}

type VertexModelDeploymentArray []VertexModelDeploymentInput

func (VertexModelDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VertexModelDeployment)(nil)).Elem()
}

func (i VertexModelDeploymentArray) ToVertexModelDeploymentArrayOutput() VertexModelDeploymentArrayOutput {
	return i.ToVertexModelDeploymentArrayOutputWithContext(context.Background())
}

func (i VertexModelDeploymentArray) ToVertexModelDeploymentArrayOutputWithContext(ctx context.Context) VertexModelDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexModelDeploymentArrayOutput)
}

// VertexModelDeploymentMapInput is an input type that accepts VertexModelDeploymentMap and VertexModelDeploymentMapOutput values.
// You can construct a concrete instance of `VertexModelDeploymentMapInput` via:
//
//	VertexModelDeploymentMap{ "key": VertexModelDeploymentArgs{...} }
type VertexModelDeploymentMapInput interface {
	pulumi.Input

	ToVertexModelDeploymentMapOutput() VertexModelDeploymentMapOutput
	ToVertexModelDeploymentMapOutputWithContext(context.Context) VertexModelDeploymentMapOutput
}

type VertexModelDeploymentMap map[string]VertexModelDeploymentInput

func (VertexModelDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VertexModelDeployment)(nil)).Elem()
}

func (i VertexModelDeploymentMap) ToVertexModelDeploymentMapOutput() VertexModelDeploymentMapOutput {
	return i.ToVertexModelDeploymentMapOutputWithContext(context.Background())
}

func (i VertexModelDeploymentMap) ToVertexModelDeploymentMapOutputWithContext(ctx context.Context) VertexModelDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexModelDeploymentMapOutput)
}

type VertexModelDeploymentOutput struct{ *pulumi.OutputState }

func (VertexModelDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexModelDeployment)(nil)).Elem()
}

func (o VertexModelDeploymentOutput) ToVertexModelDeploymentOutput() VertexModelDeploymentOutput {
	return o
}

func (o VertexModelDeploymentOutput) ToVertexModelDeploymentOutputWithContext(ctx context.Context) VertexModelDeploymentOutput {
	return o
}

// Creation timestamp
func (o VertexModelDeploymentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// ID of the deployed model
func (o VertexModelDeploymentOutput) DeployedModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.DeployedModelId }).(pulumi.StringOutput)
}

// Vertex AI Endpoint ID
func (o VertexModelDeploymentOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// Full name of the endpoint
func (o VertexModelDeploymentOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.EndpointName }).(pulumi.StringOutput)
}

// Labels for the deployment
func (o VertexModelDeploymentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Machine type for deployment
func (o VertexModelDeploymentOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringPtrOutput { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Maximum number of replicas
func (o VertexModelDeploymentOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.IntPtrOutput { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// Minimum number of replicas
func (o VertexModelDeploymentOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.IntPtrOutput { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
func (o VertexModelDeploymentOutput) ModelArtifactsBucketUri() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.ModelArtifactsBucketUri }).(pulumi.StringOutput)
}

// Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
func (o VertexModelDeploymentOutput) ModelImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.ModelImageUrl }).(pulumi.StringOutput)
}

// Google Cloud Project ID
func (o VertexModelDeploymentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Google Cloud region
func (o VertexModelDeploymentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Service account for the deployment
func (o VertexModelDeploymentOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Traffic percentage for this deployment
func (o VertexModelDeploymentOutput) TrafficPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VertexModelDeployment) pulumi.IntPtrOutput { return v.TrafficPercent }).(pulumi.IntPtrOutput)
}

type VertexModelDeploymentArrayOutput struct{ *pulumi.OutputState }

func (VertexModelDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VertexModelDeployment)(nil)).Elem()
}

func (o VertexModelDeploymentArrayOutput) ToVertexModelDeploymentArrayOutput() VertexModelDeploymentArrayOutput {
	return o
}

func (o VertexModelDeploymentArrayOutput) ToVertexModelDeploymentArrayOutputWithContext(ctx context.Context) VertexModelDeploymentArrayOutput {
	return o
}

func (o VertexModelDeploymentArrayOutput) Index(i pulumi.IntInput) VertexModelDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VertexModelDeployment {
		return vs[0].([]*VertexModelDeployment)[vs[1].(int)]
	}).(VertexModelDeploymentOutput)
}

type VertexModelDeploymentMapOutput struct{ *pulumi.OutputState }

func (VertexModelDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VertexModelDeployment)(nil)).Elem()
}

func (o VertexModelDeploymentMapOutput) ToVertexModelDeploymentMapOutput() VertexModelDeploymentMapOutput {
	return o
}

func (o VertexModelDeploymentMapOutput) ToVertexModelDeploymentMapOutputWithContext(ctx context.Context) VertexModelDeploymentMapOutput {
	return o
}

func (o VertexModelDeploymentMapOutput) MapIndex(k pulumi.StringInput) VertexModelDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VertexModelDeployment {
		return vs[0].(map[string]*VertexModelDeployment)[vs[1].(string)]
	}).(VertexModelDeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VertexModelDeploymentInput)(nil)).Elem(), &VertexModelDeployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*VertexModelDeploymentArrayInput)(nil)).Elem(), VertexModelDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VertexModelDeploymentMapInput)(nil)).Elem(), VertexModelDeploymentMap{})
	pulumi.RegisterOutputType(VertexModelDeploymentOutput{})
	pulumi.RegisterOutputType(VertexModelDeploymentArrayOutput{})
	pulumi.RegisterOutputType(VertexModelDeploymentMapOutput{})
}
