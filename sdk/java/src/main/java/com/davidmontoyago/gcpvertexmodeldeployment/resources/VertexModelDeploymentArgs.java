// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.davidmontoyago.gcpvertexmodeldeployment.resources;

import com.davidmontoyago.gcpvertexmodeldeployment.resources.inputs.EndpointModelDeploymentArgsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VertexModelDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final VertexModelDeploymentArgs Empty = new VertexModelDeploymentArgs();

    /**
     * Configuration for deploying the model to a Vertex AI endpoint. Leave empty to upload model only for batched predictions.
     * 
     */
    @Import(name="endpointModelDeployment")
    private @Nullable Output<EndpointModelDeploymentArgsArgs> endpointModelDeployment;

    /**
     * @return Configuration for deploying the model to a Vertex AI endpoint. Leave empty to upload model only for batched predictions.
     * 
     */
    public Optional<Output<EndpointModelDeploymentArgsArgs>> endpointModelDeployment() {
        return Optional.ofNullable(this.endpointModelDeployment);
    }

    @Import(name="healthRoute")
    private @Nullable Output<String> healthRoute;

    public Optional<Output<String>> healthRoute() {
        return Optional.ofNullable(this.healthRoute);
    }

    /**
     * Labels for the deployment
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for the deployment
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
     * 
     */
    @Import(name="modelArtifactsBucketUri")
    private @Nullable Output<String> modelArtifactsBucketUri;

    /**
     * @return Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
     * 
     */
    public Optional<Output<String>> modelArtifactsBucketUri() {
        return Optional.ofNullable(this.modelArtifactsBucketUri);
    }

    /**
     * Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
     * 
     */
    @Import(name="modelImageUrl", required=true)
    private Output<String> modelImageUrl;

    /**
     * @return Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
     * 
     */
    public Output<String> modelImageUrl() {
        return this.modelImageUrl;
    }

    /**
     * Bucket URI to the schema for the model inference behavior
     * 
     */
    @Import(name="modelPredictionBehaviorSchemaUri")
    private @Nullable Output<String> modelPredictionBehaviorSchemaUri;

    /**
     * @return Bucket URI to the schema for the model inference behavior
     * 
     */
    public Optional<Output<String>> modelPredictionBehaviorSchemaUri() {
        return Optional.ofNullable(this.modelPredictionBehaviorSchemaUri);
    }

    /**
     * Bucket URI to the schema for the model input
     * 
     */
    @Import(name="modelPredictionInputSchemaUri")
    private @Nullable Output<String> modelPredictionInputSchemaUri;

    /**
     * @return Bucket URI to the schema for the model input
     * 
     */
    public Optional<Output<String>> modelPredictionInputSchemaUri() {
        return Optional.ofNullable(this.modelPredictionInputSchemaUri);
    }

    /**
     * Bucket URI to the schema for the model output
     * 
     */
    @Import(name="modelPredictionOutputSchemaUri")
    private @Nullable Output<String> modelPredictionOutputSchemaUri;

    /**
     * @return Bucket URI to the schema for the model output
     * 
     */
    public Optional<Output<String>> modelPredictionOutputSchemaUri() {
        return Optional.ofNullable(this.modelPredictionOutputSchemaUri);
    }

    @Import(name="predictRoute")
    private @Nullable Output<String> predictRoute;

    public Optional<Output<String>> predictRoute() {
        return Optional.ofNullable(this.predictRoute);
    }

    /**
     * Google Cloud Project ID
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Google Cloud Project ID
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Google Cloud region
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Google Cloud region
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Service account for the model. If ModelImage is pointing to a private registry, this service account must have read access to the registry.
     * 
     */
    @Import(name="serviceAccount", required=true)
    private Output<String> serviceAccount;

    /**
     * @return Service account for the model. If ModelImage is pointing to a private registry, this service account must have read access to the registry.
     * 
     */
    public Output<String> serviceAccount() {
        return this.serviceAccount;
    }

    private VertexModelDeploymentArgs() {}

    private VertexModelDeploymentArgs(VertexModelDeploymentArgs $) {
        this.endpointModelDeployment = $.endpointModelDeployment;
        this.healthRoute = $.healthRoute;
        this.labels = $.labels;
        this.modelArtifactsBucketUri = $.modelArtifactsBucketUri;
        this.modelImageUrl = $.modelImageUrl;
        this.modelPredictionBehaviorSchemaUri = $.modelPredictionBehaviorSchemaUri;
        this.modelPredictionInputSchemaUri = $.modelPredictionInputSchemaUri;
        this.modelPredictionOutputSchemaUri = $.modelPredictionOutputSchemaUri;
        this.predictRoute = $.predictRoute;
        this.projectId = $.projectId;
        this.region = $.region;
        this.serviceAccount = $.serviceAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VertexModelDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VertexModelDeploymentArgs $;

        public Builder() {
            $ = new VertexModelDeploymentArgs();
        }

        public Builder(VertexModelDeploymentArgs defaults) {
            $ = new VertexModelDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointModelDeployment Configuration for deploying the model to a Vertex AI endpoint. Leave empty to upload model only for batched predictions.
         * 
         * @return builder
         * 
         */
        public Builder endpointModelDeployment(@Nullable Output<EndpointModelDeploymentArgsArgs> endpointModelDeployment) {
            $.endpointModelDeployment = endpointModelDeployment;
            return this;
        }

        /**
         * @param endpointModelDeployment Configuration for deploying the model to a Vertex AI endpoint. Leave empty to upload model only for batched predictions.
         * 
         * @return builder
         * 
         */
        public Builder endpointModelDeployment(EndpointModelDeploymentArgsArgs endpointModelDeployment) {
            return endpointModelDeployment(Output.of(endpointModelDeployment));
        }

        public Builder healthRoute(@Nullable Output<String> healthRoute) {
            $.healthRoute = healthRoute;
            return this;
        }

        public Builder healthRoute(String healthRoute) {
            return healthRoute(Output.of(healthRoute));
        }

        /**
         * @param labels Labels for the deployment
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for the deployment
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param modelArtifactsBucketUri Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
         * 
         * @return builder
         * 
         */
        public Builder modelArtifactsBucketUri(@Nullable Output<String> modelArtifactsBucketUri) {
            $.modelArtifactsBucketUri = modelArtifactsBucketUri;
            return this;
        }

        /**
         * @param modelArtifactsBucketUri Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
         * 
         * @return builder
         * 
         */
        public Builder modelArtifactsBucketUri(String modelArtifactsBucketUri) {
            return modelArtifactsBucketUri(Output.of(modelArtifactsBucketUri));
        }

        /**
         * @param modelImageUrl Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
         * 
         * @return builder
         * 
         */
        public Builder modelImageUrl(Output<String> modelImageUrl) {
            $.modelImageUrl = modelImageUrl;
            return this;
        }

        /**
         * @param modelImageUrl Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
         * 
         * @return builder
         * 
         */
        public Builder modelImageUrl(String modelImageUrl) {
            return modelImageUrl(Output.of(modelImageUrl));
        }

        /**
         * @param modelPredictionBehaviorSchemaUri Bucket URI to the schema for the model inference behavior
         * 
         * @return builder
         * 
         */
        public Builder modelPredictionBehaviorSchemaUri(@Nullable Output<String> modelPredictionBehaviorSchemaUri) {
            $.modelPredictionBehaviorSchemaUri = modelPredictionBehaviorSchemaUri;
            return this;
        }

        /**
         * @param modelPredictionBehaviorSchemaUri Bucket URI to the schema for the model inference behavior
         * 
         * @return builder
         * 
         */
        public Builder modelPredictionBehaviorSchemaUri(String modelPredictionBehaviorSchemaUri) {
            return modelPredictionBehaviorSchemaUri(Output.of(modelPredictionBehaviorSchemaUri));
        }

        /**
         * @param modelPredictionInputSchemaUri Bucket URI to the schema for the model input
         * 
         * @return builder
         * 
         */
        public Builder modelPredictionInputSchemaUri(@Nullable Output<String> modelPredictionInputSchemaUri) {
            $.modelPredictionInputSchemaUri = modelPredictionInputSchemaUri;
            return this;
        }

        /**
         * @param modelPredictionInputSchemaUri Bucket URI to the schema for the model input
         * 
         * @return builder
         * 
         */
        public Builder modelPredictionInputSchemaUri(String modelPredictionInputSchemaUri) {
            return modelPredictionInputSchemaUri(Output.of(modelPredictionInputSchemaUri));
        }

        /**
         * @param modelPredictionOutputSchemaUri Bucket URI to the schema for the model output
         * 
         * @return builder
         * 
         */
        public Builder modelPredictionOutputSchemaUri(@Nullable Output<String> modelPredictionOutputSchemaUri) {
            $.modelPredictionOutputSchemaUri = modelPredictionOutputSchemaUri;
            return this;
        }

        /**
         * @param modelPredictionOutputSchemaUri Bucket URI to the schema for the model output
         * 
         * @return builder
         * 
         */
        public Builder modelPredictionOutputSchemaUri(String modelPredictionOutputSchemaUri) {
            return modelPredictionOutputSchemaUri(Output.of(modelPredictionOutputSchemaUri));
        }

        public Builder predictRoute(@Nullable Output<String> predictRoute) {
            $.predictRoute = predictRoute;
            return this;
        }

        public Builder predictRoute(String predictRoute) {
            return predictRoute(Output.of(predictRoute));
        }

        /**
         * @param projectId Google Cloud Project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Google Cloud Project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region Google Cloud region
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Google Cloud region
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceAccount Service account for the model. If ModelImage is pointing to a private registry, this service account must have read access to the registry.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Service account for the model. If ModelImage is pointing to a private registry, this service account must have read access to the registry.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public VertexModelDeploymentArgs build() {
            if ($.modelImageUrl == null) {
                throw new MissingRequiredPropertyException("VertexModelDeploymentArgs", "modelImageUrl");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("VertexModelDeploymentArgs", "projectId");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("VertexModelDeploymentArgs", "region");
            }
            if ($.serviceAccount == null) {
                throw new MissingRequiredPropertyException("VertexModelDeploymentArgs", "serviceAccount");
            }
            return $;
        }
    }

}
