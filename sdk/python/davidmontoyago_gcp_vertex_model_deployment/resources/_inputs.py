# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EndpointModelDeploymentArgsArgs',
    'EndpointModelDeploymentArgsArgsDict',
]

MYPY = False

if not MYPY:
    class EndpointModelDeploymentArgsArgsDict(TypedDict):
        endpoint_id: pulumi.Input[_builtins.str]
        """
        Vertex AI Endpoint ID
        """
        accelerator_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        Accelerator count for deployment
        """
        accelerator_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Accelerator type for endpoint deployment. Defaults to ACCELERATOR_TYPE_UNSPECIFIED. E.g.: NVIDIA_TESLA_P4, NVIDIA_TESLA_T4
        """
        disable_container_logging: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Disable container logging
        """
        enable_access_logging: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable access logging
        """
        enable_spot_vms: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable spot VMs
        """
        machine_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Machine type for deployment
        """
        max_replicas: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum number of replicas
        """
        min_replicas: NotRequired[pulumi.Input[_builtins.int]]
        """
        Minimum number of replicas
        """
        traffic_percent: NotRequired[pulumi.Input[_builtins.int]]
        """
        Traffic percentage for this deployment
        """
elif False:
    EndpointModelDeploymentArgsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EndpointModelDeploymentArgsArgs:
    def __init__(__self__, *,
                 endpoint_id: pulumi.Input[_builtins.str],
                 accelerator_count: Optional[pulumi.Input[_builtins.int]] = None,
                 accelerator_type: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_container_logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_access_logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_spot_vms: Optional[pulumi.Input[_builtins.bool]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 traffic_percent: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] endpoint_id: Vertex AI Endpoint ID
        :param pulumi.Input[_builtins.int] accelerator_count: Accelerator count for deployment
        :param pulumi.Input[_builtins.str] accelerator_type: Accelerator type for endpoint deployment. Defaults to ACCELERATOR_TYPE_UNSPECIFIED. E.g.: NVIDIA_TESLA_P4, NVIDIA_TESLA_T4
        :param pulumi.Input[_builtins.bool] disable_container_logging: Disable container logging
        :param pulumi.Input[_builtins.bool] enable_access_logging: Enable access logging
        :param pulumi.Input[_builtins.bool] enable_spot_vms: Enable spot VMs
        :param pulumi.Input[_builtins.str] machine_type: Machine type for deployment
        :param pulumi.Input[_builtins.int] max_replicas: Maximum number of replicas
        :param pulumi.Input[_builtins.int] min_replicas: Minimum number of replicas
        :param pulumi.Input[_builtins.int] traffic_percent: Traffic percentage for this deployment
        """
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if disable_container_logging is not None:
            pulumi.set(__self__, "disable_container_logging", disable_container_logging)
        if enable_access_logging is not None:
            pulumi.set(__self__, "enable_access_logging", enable_access_logging)
        if enable_spot_vms is not None:
            pulumi.set(__self__, "enable_spot_vms", enable_spot_vms)
        if machine_type is None:
            machine_type = 'n1-standard-8'
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if max_replicas is None:
            max_replicas = 3
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is None:
            min_replicas = 1
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if traffic_percent is None:
            traffic_percent = 100
        if traffic_percent is not None:
            pulumi.set(__self__, "traffic_percent", traffic_percent)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Input[_builtins.str]:
        """
        Vertex AI Endpoint ID
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Accelerator count for deployment
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accelerator_count", value)

    @_builtins.property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Accelerator type for endpoint deployment. Defaults to ACCELERATOR_TYPE_UNSPECIFIED. E.g.: NVIDIA_TESLA_P4, NVIDIA_TESLA_T4
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accelerator_type", value)

    @_builtins.property
    @pulumi.getter(name="disableContainerLogging")
    def disable_container_logging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disable container logging
        """
        return pulumi.get(self, "disable_container_logging")

    @disable_container_logging.setter
    def disable_container_logging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_container_logging", value)

    @_builtins.property
    @pulumi.getter(name="enableAccessLogging")
    def enable_access_logging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable access logging
        """
        return pulumi.get(self, "enable_access_logging")

    @enable_access_logging.setter
    def enable_access_logging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_access_logging", value)

    @_builtins.property
    @pulumi.getter(name="enableSpotVMs")
    def enable_spot_vms(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable spot VMs
        """
        return pulumi.get(self, "enable_spot_vms")

    @enable_spot_vms.setter
    def enable_spot_vms(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_spot_vms", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine type for deployment
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum number of replicas
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replicas", value)

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimum number of replicas
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replicas", value)

    @_builtins.property
    @pulumi.getter(name="trafficPercent")
    def traffic_percent(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Traffic percentage for this deployment
        """
        return pulumi.get(self, "traffic_percent")

    @traffic_percent.setter
    def traffic_percent(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "traffic_percent", value)


