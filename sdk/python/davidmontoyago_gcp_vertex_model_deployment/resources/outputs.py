# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EndpointModelDeploymentArgs',
]

@pulumi.output_type
class EndpointModelDeploymentArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointId":
            suggest = "endpoint_id"
        elif key == "acceleratorCount":
            suggest = "accelerator_count"
        elif key == "acceleratorType":
            suggest = "accelerator_type"
        elif key == "machineType":
            suggest = "machine_type"
        elif key == "maxReplicas":
            suggest = "max_replicas"
        elif key == "minReplicas":
            suggest = "min_replicas"
        elif key == "trafficPercent":
            suggest = "traffic_percent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointModelDeploymentArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointModelDeploymentArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointModelDeploymentArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_id: _builtins.str,
                 accelerator_count: Optional[_builtins.int] = None,
                 accelerator_type: Optional[_builtins.str] = None,
                 machine_type: Optional[_builtins.str] = None,
                 max_replicas: Optional[_builtins.int] = None,
                 min_replicas: Optional[_builtins.int] = None,
                 traffic_percent: Optional[_builtins.int] = None):
        """
        :param _builtins.str endpoint_id: Vertex AI Endpoint ID
        :param _builtins.int accelerator_count: Accelerator count for deployment
        :param _builtins.str accelerator_type: Accelerator type for endpoint deployment. Defaults to ACCELERATOR_TYPE_UNSPECIFIED. E.g.: NVIDIA_TESLA_P4, NVIDIA_TESLA_T4
        :param _builtins.str machine_type: Machine type for deployment
        :param _builtins.int max_replicas: Maximum number of replicas
        :param _builtins.int min_replicas: Minimum number of replicas
        :param _builtins.int traffic_percent: Traffic percentage for this deployment
        """
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if machine_type is None:
            machine_type = 'n1-standard-8'
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if max_replicas is None:
            max_replicas = 3
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is None:
            min_replicas = 1
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if traffic_percent is None:
            traffic_percent = 100
        if traffic_percent is not None:
            pulumi.set(__self__, "traffic_percent", traffic_percent)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        """
        Vertex AI Endpoint ID
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[_builtins.int]:
        """
        Accelerator count for deployment
        """
        return pulumi.get(self, "accelerator_count")

    @_builtins.property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[_builtins.str]:
        """
        Accelerator type for endpoint deployment. Defaults to ACCELERATOR_TYPE_UNSPECIFIED. E.g.: NVIDIA_TESLA_P4, NVIDIA_TESLA_T4
        """
        return pulumi.get(self, "accelerator_type")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[_builtins.str]:
        """
        Machine type for deployment
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[_builtins.int]:
        """
        Maximum number of replicas
        """
        return pulumi.get(self, "max_replicas")

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[_builtins.int]:
        """
        Minimum number of replicas
        """
        return pulumi.get(self, "min_replicas")

    @_builtins.property
    @pulumi.getter(name="trafficPercent")
    def traffic_percent(self) -> Optional[_builtins.int]:
        """
        Traffic percentage for this deployment
        """
        return pulumi.get(self, "traffic_percent")


