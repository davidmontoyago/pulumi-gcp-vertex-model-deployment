# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VertexModelDeploymentArgs', 'VertexModelDeployment']

@pulumi.input_type
class VertexModelDeploymentArgs:
    def __init__(__self__, *,
                 endpoint_id: pulumi.Input[_builtins.str],
                 model_artifacts_bucket_uri: pulumi.Input[_builtins.str],
                 model_image_url: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_percent: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a VertexModelDeployment resource.
        :param pulumi.Input[_builtins.str] endpoint_id: Vertex AI Endpoint ID
        :param pulumi.Input[_builtins.str] model_artifacts_bucket_uri: Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
        :param pulumi.Input[_builtins.str] model_image_url: Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
        :param pulumi.Input[_builtins.str] project_id: Google Cloud Project ID
        :param pulumi.Input[_builtins.str] region: Google Cloud region
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the deployment
        :param pulumi.Input[_builtins.str] machine_type: Machine type for deployment
        :param pulumi.Input[_builtins.int] max_replicas: Maximum number of replicas
        :param pulumi.Input[_builtins.int] min_replicas: Minimum number of replicas
        :param pulumi.Input[_builtins.str] service_account: Service account for the deployment
        :param pulumi.Input[_builtins.int] traffic_percent: Traffic percentage for this deployment
        """
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        pulumi.set(__self__, "model_artifacts_bucket_uri", model_artifacts_bucket_uri)
        pulumi.set(__self__, "model_image_url", model_image_url)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_type is None:
            machine_type = 'n1-standard-2'
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if max_replicas is None:
            max_replicas = 3
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is None:
            min_replicas = 1
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if traffic_percent is None:
            traffic_percent = 100
        if traffic_percent is not None:
            pulumi.set(__self__, "traffic_percent", traffic_percent)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Input[_builtins.str]:
        """
        Vertex AI Endpoint ID
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="modelArtifactsBucketUri")
    def model_artifacts_bucket_uri(self) -> pulumi.Input[_builtins.str]:
        """
        Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
        """
        return pulumi.get(self, "model_artifacts_bucket_uri")

    @model_artifacts_bucket_uri.setter
    def model_artifacts_bucket_uri(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_artifacts_bucket_uri", value)

    @_builtins.property
    @pulumi.getter(name="modelImageUrl")
    def model_image_url(self) -> pulumi.Input[_builtins.str]:
        """
        Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
        """
        return pulumi.get(self, "model_image_url")

    @model_image_url.setter
    def model_image_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_image_url", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        Google Cloud Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Google Cloud region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the deployment
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine type for deployment
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum number of replicas
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replicas", value)

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimum number of replicas
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replicas", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service account for the deployment
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account", value)

    @_builtins.property
    @pulumi.getter(name="trafficPercent")
    def traffic_percent(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Traffic percentage for this deployment
        """
        return pulumi.get(self, "traffic_percent")

    @traffic_percent.setter
    def traffic_percent(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "traffic_percent", value)


@pulumi.type_token("gcp-vertex-model-deployment:resources:VertexModelDeployment")
class VertexModelDeployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 model_artifacts_bucket_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 model_image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_percent: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Deploys a model to a Vertex AI endpoint

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_id: Vertex AI Endpoint ID
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the deployment
        :param pulumi.Input[_builtins.str] machine_type: Machine type for deployment
        :param pulumi.Input[_builtins.int] max_replicas: Maximum number of replicas
        :param pulumi.Input[_builtins.int] min_replicas: Minimum number of replicas
        :param pulumi.Input[_builtins.str] model_artifacts_bucket_uri: Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
        :param pulumi.Input[_builtins.str] model_image_url: Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
        :param pulumi.Input[_builtins.str] project_id: Google Cloud Project ID
        :param pulumi.Input[_builtins.str] region: Google Cloud region
        :param pulumi.Input[_builtins.str] service_account: Service account for the deployment
        :param pulumi.Input[_builtins.int] traffic_percent: Traffic percentage for this deployment
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VertexModelDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Deploys a model to a Vertex AI endpoint

        :param str resource_name: The name of the resource.
        :param VertexModelDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VertexModelDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 model_artifacts_bucket_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 model_image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_percent: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VertexModelDeploymentArgs.__new__(VertexModelDeploymentArgs)

            if endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint_id'")
            __props__.__dict__["endpoint_id"] = endpoint_id
            __props__.__dict__["labels"] = labels
            if machine_type is None:
                machine_type = 'n1-standard-2'
            __props__.__dict__["machine_type"] = machine_type
            if max_replicas is None:
                max_replicas = 3
            __props__.__dict__["max_replicas"] = max_replicas
            if min_replicas is None:
                min_replicas = 1
            __props__.__dict__["min_replicas"] = min_replicas
            if model_artifacts_bucket_uri is None and not opts.urn:
                raise TypeError("Missing required property 'model_artifacts_bucket_uri'")
            __props__.__dict__["model_artifacts_bucket_uri"] = model_artifacts_bucket_uri
            if model_image_url is None and not opts.urn:
                raise TypeError("Missing required property 'model_image_url'")
            __props__.__dict__["model_image_url"] = model_image_url
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["service_account"] = service_account
            if traffic_percent is None:
                traffic_percent = 100
            __props__.__dict__["traffic_percent"] = traffic_percent
            __props__.__dict__["create_time"] = None
            __props__.__dict__["deployed_model_id"] = None
            __props__.__dict__["endpoint_name"] = None
        super(VertexModelDeployment, __self__).__init__(
            'gcp-vertex-model-deployment:resources:VertexModelDeployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VertexModelDeployment':
        """
        Get an existing VertexModelDeployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VertexModelDeploymentArgs.__new__(VertexModelDeploymentArgs)

        __props__.__dict__["create_time"] = None
        __props__.__dict__["deployed_model_id"] = None
        __props__.__dict__["endpoint_id"] = None
        __props__.__dict__["endpoint_name"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["machine_type"] = None
        __props__.__dict__["max_replicas"] = None
        __props__.__dict__["min_replicas"] = None
        __props__.__dict__["model_artifacts_bucket_uri"] = None
        __props__.__dict__["model_image_url"] = None
        __props__.__dict__["project_id"] = None
        __props__.__dict__["region"] = None
        __props__.__dict__["service_account"] = None
        __props__.__dict__["traffic_percent"] = None
        return VertexModelDeployment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        Creation timestamp
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="deployedModelId")
    def deployed_model_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the deployed model
        """
        return pulumi.get(self, "deployed_model_id")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[_builtins.str]:
        """
        Vertex AI Endpoint ID
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Output[_builtins.str]:
        """
        Full name of the endpoint
        """
        return pulumi.get(self, "endpoint_name")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the deployment
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Machine type for deployment
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Maximum number of replicas
        """
        return pulumi.get(self, "max_replicas")

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Minimum number of replicas
        """
        return pulumi.get(self, "min_replicas")

    @_builtins.property
    @pulumi.getter(name="modelArtifactsBucketUri")
    def model_artifacts_bucket_uri(self) -> pulumi.Output[_builtins.str]:
        """
        Bucket URI to the model artifacts. For instance, gs://my-bucket/my-model-artifacts/ - See: https://cloud.google.com/vertex-ai/docs/training/exporting-model-artifacts
        """
        return pulumi.get(self, "model_artifacts_bucket_uri")

    @_builtins.property
    @pulumi.getter(name="modelImageUrl")
    def model_image_url(self) -> pulumi.Output[_builtins.str]:
        """
        Vertex AI Image URL of a custom or prebuilt container model server. See: https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers
        """
        return pulumi.get(self, "model_image_url")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        Google Cloud Project ID
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Google Cloud region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Service account for the deployment
        """
        return pulumi.get(self, "service_account")

    @_builtins.property
    @pulumi.getter(name="trafficPercent")
    def traffic_percent(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Traffic percentage for this deployment
        """
        return pulumi.get(self, "traffic_percent")

